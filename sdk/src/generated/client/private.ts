// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Private implements flatbuffers.IUnpackableObject<PrivateT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Private {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPrivate(bb:flatbuffers.ByteBuffer, obj?:Private):Private {
  return (obj || new Private()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPrivate(bb:flatbuffers.ByteBuffer, obj?:Private):Private {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Private()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

token():string|null
token(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
token(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

lastLogin():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

energy():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 10;
}

energyCapacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 10;
}

energyGenerationSec():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 2;
}

unitCapacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startPrivate(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addToken(builder:flatbuffers.Builder, tokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, tokenOffset, 0);
}

static addLastLogin(builder:flatbuffers.Builder, lastLogin:number) {
  builder.addFieldInt32(1, lastLogin, 0);
}

static addEnergy(builder:flatbuffers.Builder, energy:number) {
  builder.addFieldInt8(2, energy, 10);
}

static addEnergyCapacity(builder:flatbuffers.Builder, energyCapacity:number) {
  builder.addFieldInt8(3, energyCapacity, 10);
}

static addEnergyGenerationSec(builder:flatbuffers.Builder, energyGenerationSec:number) {
  builder.addFieldInt8(4, energyGenerationSec, 2);
}

static addUnitCapacity(builder:flatbuffers.Builder, unitCapacity:number) {
  builder.addFieldInt8(5, unitCapacity, 0);
}

static endPrivate(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPrivate(builder:flatbuffers.Builder, tokenOffset:flatbuffers.Offset, lastLogin:number, energy:number, energyCapacity:number, energyGenerationSec:number, unitCapacity:number):flatbuffers.Offset {
  Private.startPrivate(builder);
  Private.addToken(builder, tokenOffset);
  Private.addLastLogin(builder, lastLogin);
  Private.addEnergy(builder, energy);
  Private.addEnergyCapacity(builder, energyCapacity);
  Private.addEnergyGenerationSec(builder, energyGenerationSec);
  Private.addUnitCapacity(builder, unitCapacity);
  return Private.endPrivate(builder);
}

unpack(): PrivateT {
  return new PrivateT(
    this.token(),
    this.lastLogin(),
    this.energy(),
    this.energyCapacity(),
    this.energyGenerationSec(),
    this.unitCapacity()
  );
}


unpackTo(_o: PrivateT): void {
  _o.token = this.token();
  _o.lastLogin = this.lastLogin();
  _o.energy = this.energy();
  _o.energyCapacity = this.energyCapacity();
  _o.energyGenerationSec = this.energyGenerationSec();
  _o.unitCapacity = this.unitCapacity();
}
}

export class PrivateT implements flatbuffers.IGeneratedObject {
constructor(
  public token: string|Uint8Array|null = null,
  public lastLogin: number = 0,
  public energy: number = 10,
  public energyCapacity: number = 10,
  public energyGenerationSec: number = 2,
  public unitCapacity: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const token = (this.token !== null ? builder.createString(this.token!) : 0);

  return Private.createPrivate(builder,
    token,
    this.lastLogin,
    this.energy,
    this.energyCapacity,
    this.energyGenerationSec,
    this.unitCapacity
  );
}
}
