// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ClientPrivateData implements flatbuffers.IUnpackableObject<ClientPrivateDataT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ClientPrivateData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClientPrivateData(bb:flatbuffers.ByteBuffer, obj?:ClientPrivateData):ClientPrivateData {
  return (obj || new ClientPrivateData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClientPrivateData(bb:flatbuffers.ByteBuffer, obj?:ClientPrivateData):ClientPrivateData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClientPrivateData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startClientPrivateData(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static endClientPrivateData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createClientPrivateData(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset):flatbuffers.Offset {
  ClientPrivateData.startClientPrivateData(builder);
  ClientPrivateData.addId(builder, idOffset);
  return ClientPrivateData.endClientPrivateData(builder);
}

unpack(): ClientPrivateDataT {
  return new ClientPrivateDataT(
    this.id()
  );
}


unpackTo(_o: ClientPrivateDataT): void {
  _o.id = this.id();
}
}

export class ClientPrivateDataT implements flatbuffers.IGeneratedObject {
constructor(
  public id: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const id = (this.id !== null ? builder.createString(this.id!) : 0);

  return ClientPrivateData.createClientPrivateData(builder,
    id
  );
}
}
