// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Public implements flatbuffers.IUnpackableObject<PublicT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Public {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPublic(bb:flatbuffers.ByteBuffer, obj?:Public):Public {
  return (obj || new Public()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPublic(bb:flatbuffers.ByteBuffer, obj?:Public):Public {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Public()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

uuid():string|null
uuid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
uuid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPublic(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addUuid(builder:flatbuffers.Builder, uuidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, uuidOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
}

static endPublic(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPublic(builder:flatbuffers.Builder, uuidOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset):flatbuffers.Offset {
  Public.startPublic(builder);
  Public.addUuid(builder, uuidOffset);
  Public.addName(builder, nameOffset);
  return Public.endPublic(builder);
}

unpack(): PublicT {
  return new PublicT(
    this.uuid(),
    this.name()
  );
}


unpackTo(_o: PublicT): void {
  _o.uuid = this.uuid();
  _o.name = this.name();
}
}

export class PublicT implements flatbuffers.IGeneratedObject {
constructor(
  public uuid: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const uuid = (this.uuid !== null ? builder.createString(this.uuid!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);

  return Public.createPublic(builder,
    uuid,
    name
  );
}
}
