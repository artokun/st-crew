// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Private, PrivateT } from '../client/private.js';
import { Public, PublicT } from '../client/public.js';


export class Client implements flatbuffers.IUnpackableObject<ClientT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Client {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClient(bb:flatbuffers.ByteBuffer, obj?:Client):Client {
  return (obj || new Client()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClient(bb:flatbuffers.ByteBuffer, obj?:Client):Client {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Client()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

public_(obj?:Public):Public|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Public()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

private_(obj?:Private):Private|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Private()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startClient(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPublic(builder:flatbuffers.Builder, public_Offset:flatbuffers.Offset) {
  builder.addFieldOffset(0, public_Offset, 0);
}

static addPrivate(builder:flatbuffers.Builder, private_Offset:flatbuffers.Offset) {
  builder.addFieldOffset(1, private_Offset, 0);
}

static endClient(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishClientBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedClientBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}


unpack(): ClientT {
  return new ClientT(
    (this.public_() !== null ? this.public_()!.unpack() : null),
    (this.private_() !== null ? this.private_()!.unpack() : null)
  );
}


unpackTo(_o: ClientT): void {
  _o.public_ = (this.public_() !== null ? this.public_()!.unpack() : null);
  _o.private_ = (this.private_() !== null ? this.private_()!.unpack() : null);
}
}

export class ClientT implements flatbuffers.IGeneratedObject {
constructor(
  public public_: PublicT|null = null,
  public private_: PrivateT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const public_ = (this.public_ !== null ? this.public_!.pack(builder) : 0);
  const private_ = (this.private_ !== null ? this.private_!.pack(builder) : 0);

  Client.startClient(builder);
  Client.addPublic(builder, public_);
  Client.addPrivate(builder, private_);

  return Client.endClient(builder);
}
}
