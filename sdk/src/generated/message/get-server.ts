// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class GetServer implements flatbuffers.IUnpackableObject<GetServerT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetServer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetServer(bb:flatbuffers.ByteBuffer, obj?:GetServer):GetServer {
  return (obj || new GetServer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetServer(bb:flatbuffers.ByteBuffer, obj?:GetServer):GetServer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetServer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

clientsConnected():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startGetServer(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addClientsConnected(builder:flatbuffers.Builder, clientsConnected:number) {
  builder.addFieldInt16(0, clientsConnected, 0);
}

static endGetServer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetServer(builder:flatbuffers.Builder, clientsConnected:number):flatbuffers.Offset {
  GetServer.startGetServer(builder);
  GetServer.addClientsConnected(builder, clientsConnected);
  return GetServer.endGetServer(builder);
}

unpack(): GetServerT {
  return new GetServerT(
    this.clientsConnected()
  );
}


unpackTo(_o: GetServerT): void {
  _o.clientsConnected = this.clientsConnected();
}
}

export class GetServerT implements flatbuffers.IGeneratedObject {
constructor(
  public clientsConnected: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return GetServer.createGetServer(builder,
    this.clientsConnected
  );
}
}
