// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class ServerStatEvent implements flatbuffers.IUnpackableObject<ServerStatEventT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ServerStatEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsServerStatEvent(bb:flatbuffers.ByteBuffer, obj?:ServerStatEvent):ServerStatEvent {
  return (obj || new ServerStatEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsServerStatEvent(bb:flatbuffers.ByteBuffer, obj?:ServerStatEvent):ServerStatEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ServerStatEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

clientsConnected():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startServerStatEvent(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addClientsConnected(builder:flatbuffers.Builder, clientsConnected:number) {
  builder.addFieldInt32(0, clientsConnected, 0);
}

static endServerStatEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createServerStatEvent(builder:flatbuffers.Builder, clientsConnected:number):flatbuffers.Offset {
  ServerStatEvent.startServerStatEvent(builder);
  ServerStatEvent.addClientsConnected(builder, clientsConnected);
  return ServerStatEvent.endServerStatEvent(builder);
}

unpack(): ServerStatEventT {
  return new ServerStatEventT(
    this.clientsConnected()
  );
}


unpackTo(_o: ServerStatEventT): void {
  _o.clientsConnected = this.clientsConnected();
}
}

export class ServerStatEventT implements flatbuffers.IGeneratedObject {
constructor(
  public clientsConnected: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return ServerStatEvent.createServerStatEvent(builder,
    this.clientsConnected
  );
}
}
