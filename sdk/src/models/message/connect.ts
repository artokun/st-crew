// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class connect implements flatbuffers.IUnpackableObject<connectT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):connect {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsconnect(bb:flatbuffers.ByteBuffer, obj?:connect):connect {
  return (obj || new connect()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsconnect(bb:flatbuffers.ByteBuffer, obj?:connect):connect {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new connect()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startconnect(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endconnect(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createconnect(builder:flatbuffers.Builder):flatbuffers.Offset {
  connect.startconnect(builder);
  return connect.endconnect(builder);
}

unpack(): connectT {
  return new connectT();
}


unpackTo(_o: connectT): void {}
}

export class connectT implements flatbuffers.IGeneratedObject {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return connect.createconnect(builder);
}
}
