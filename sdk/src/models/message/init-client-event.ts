// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Client, ClientT } from '../client/client.js';


export class InitClientEvent implements flatbuffers.IUnpackableObject<InitClientEventT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):InitClientEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsInitClientEvent(bb:flatbuffers.ByteBuffer, obj?:InitClientEvent):InitClientEvent {
  return (obj || new InitClientEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsInitClientEvent(bb:flatbuffers.ByteBuffer, obj?:InitClientEvent):InitClientEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new InitClientEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

client(obj?:Client):Client|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Client()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startInitClientEvent(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addClient(builder:flatbuffers.Builder, clientOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, clientOffset, 0);
}

static endInitClientEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createInitClientEvent(builder:flatbuffers.Builder, clientOffset:flatbuffers.Offset):flatbuffers.Offset {
  InitClientEvent.startInitClientEvent(builder);
  InitClientEvent.addClient(builder, clientOffset);
  return InitClientEvent.endInitClientEvent(builder);
}

unpack(): InitClientEventT {
  return new InitClientEventT(
    (this.client() !== null ? this.client()!.unpack() : null)
  );
}


unpackTo(_o: InitClientEventT): void {
  _o.client = (this.client() !== null ? this.client()!.unpack() : null);
}
}

export class InitClientEventT implements flatbuffers.IGeneratedObject {
constructor(
  public client: ClientT|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const client = (this.client !== null ? this.client!.pack(builder) : 0);

  return InitClientEvent.createInitClientEvent(builder,
    client
  );
}
}
